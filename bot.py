import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from call_analyzer import CallAnalyzer

TOKEN = '7589904927:AAFqiqu8eqhGMD9w5rJj55-r2n39inafAqY'
MISTRAL_API_KEY = "1uIQjVsBbqhY4FogxSBklVXIeAnnnzpG"

bot = Bot(TOKEN)
dp = Dispatcher()
analyzer = CallAnalyzer(MISTRAL_API_KEY)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ —Ç–æ–Ω –∏ –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")

@dp.message()
async def analyze_call(message: types.Message):
    try:
        analysis = analyzer.analyze(message.text)
        response = (
            f"üìä –¢–æ–Ω —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {analysis.tone}\n\n"
            "üîç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n" +
            "\n".join(f"‚Ä¢ {rec}" for rec in analysis.recommendations)
        )
        await message.answer(response)
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())